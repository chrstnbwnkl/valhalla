#include <iostream>
#include <string>
#include <vector>

#include "baldr/graphreader.h"
#include "baldr/rapidjson_utils.h"
#include "loki/worker.h"
#include "thor/worker.h"

#include "gurka/gurka.h"
#include "test.h"

#include <boost/geometry.hpp>
#include <boost/geometry/geometries/point_xy.hpp>
#include <boost/geometry/geometries/polygon.hpp>

using point_type = boost::geometry::model::d2::point_xy<double>;
using polygon_type = boost::geometry::model::polygon<point_type>;
using boost::geometry::within;

using namespace valhalla;
using namespace valhalla::thor;
using namespace valhalla::sif;
using namespace valhalla::loki;
using namespace valhalla::baldr;
using namespace valhalla::midgard;
using namespace valhalla::tyr;

using rp = rapidjson::Pointer;

namespace {

const auto cfg = test::make_config(VALHALLA_BUILD_DIR "test/data/utrecht_tiles",
                                   {{"service_limits.isochrone.max_locations", "2"}});

void check_coords(const rapidjson::Value& a, const rapidjson::Value& b) {
  EXPECT_NEAR(a.GetArray()[0].GetDouble(), b.GetArray()[0].GetDouble(), 0.00002);
  EXPECT_NEAR(a.GetArray()[1].GetDouble(), b.GetArray()[1].GetDouble(), 0.00002);
}

void test_iso_shape_equality(const rapidjson::GenericArray<false, rapidjson::Value>& actual_geom,
                             const rapidjson::GenericArray<false, rapidjson::Value>& expected_geom,
                             bool polygon) {
  // different platforms can end up having some slightly different floating point wobble
  // to avoid failing tests we measure shape similarity and fail if its too far out of whack
  std::vector<PointLL> actual, expected;
  for (size_t j = 0; j < std::max(expected_geom.Size(), actual_geom.Size()); ++j) {
    if (j < actual_geom.Size()) {
      auto c = actual_geom[j].GetArray();
      actual.emplace_back(c[0].GetDouble(), c[1].GetDouble());
    }
    if (j < expected_geom.Size()) {
      auto c = expected_geom[j].GetArray();
      expected.emplace_back(c[0].GetDouble(), c[1].GetDouble());
    }
  }
  ASSERT_TRUE(test::shape_equality(actual, expected, 33));
}

void try_isochrone(loki_worker_t& loki_worker,
                   thor_worker_t& thor_worker,
                   const std::string& test_request,
                   const std::string& expected_json) {
  // compute the isochrone
  Api request;
  ParseApi(test_request, Options::isochrone, request);
  loki_worker.isochrones(request);
  auto response_json = thor_worker.isochrones(request);
  loki_worker.cleanup();
  thor_worker.cleanup();

  // Parse isochrone json responses
  rapidjson::Document response, expected_response;
  response.Parse(response_json);
  expected_response.Parse(expected_json);

  // Same number of features
  auto feature_count = rp("/features").Get(expected_response)->GetArray().Size();
  ASSERT_EQ(rp("/features").Get(response)->GetArray().Size(), feature_count);

  // Check features are in the right order and look roughly the same
  for (size_t i = 0; i < feature_count; ++i) {
    // same metadata
    auto actual_properties = rp("/features/" + std::to_string(i) + "/properties").Get(response);
    auto expected_properties =
        rp("/features/" + std::to_string(i) + "/properties").Get(expected_response);
    EXPECT_TRUE((actual_properties && expected_properties) ||
                (!actual_properties && !expected_properties));
    if (expected_properties) {
      ASSERT_EQ(actual_properties->GetObject(), expected_properties->GetObject());
    }

    // same geom type
    std::string actual_type =
        rp("/features/" + std::to_string(i) + "/geometry/type").Get(response)->GetString();
    std::string expected_type =
        rp("/features/" + std::to_string(i) + "/geometry/type").Get(expected_response)->GetString();
    ASSERT_EQ(actual_type, expected_type);

    // point is special
    if (expected_type == "Point") {
      check_coords(*rp("/features/" + std::to_string(i) + "/geometry/coordinates").Get(response),
                   *rp("/features/" + std::to_string(i) + "/geometry/coordinates")
                        .Get(expected_response));
    } // iteration required
    else {
      // same geom appx

      std::string coord_selector = "/features/" + std::to_string(i) + "/geometry/coordinates";
      if (actual_type != "MultiPolygon") {
        uint32_t size =
            actual_type == "LineString" ? 1 : rp(coord_selector).Get(response)->GetArray().Size();
        for (uint32_t j = 0; j < size; ++j) {
          auto actual_geom =
              rp(coord_selector + (actual_type == "Polygon" ? "/" + std::to_string(j) : ""))
                  .Get(response)
                  ->GetArray();
          auto expected_geom = rp(coord_selector + (expected_type == "Polygon" ? "/0" : ""))
                                   .Get(expected_response)
                                   ->GetArray();

          test_iso_shape_equality(actual_geom, expected_geom, false);
        }

      } else {
        uint32_t actual_poly_size = rp(coord_selector).Get(response)->GetArray().Size();
        uint32_t expected_poly_size = rp(coord_selector).Get(expected_response)->GetArray().Size();

        ASSERT_EQ(actual_poly_size, expected_poly_size);
        for (uint32_t j = 0; j < actual_poly_size; ++j) {

          uint32_t actual_ring_count = rp(coord_selector).Get(response)->GetArray()[j].Size();
          uint32_t expected_ring_count = rp(coord_selector).Get(response)->GetArray()[j].Size();
          ASSERT_EQ(actual_ring_count, expected_ring_count);
          // test equality of all the rings
          for (uint32_t k = 0; k < actual_ring_count; ++k) {
            auto actual_geom = rp(coord_selector + "/" + std::to_string(j) + "/" + std::to_string(k))
                                   .Get(response)
                                   ->GetArray();
            auto expected_geom =
                rp(coord_selector + "/" + std::to_string(j) + "/" + std::to_string(k))
                    .Get(expected_response)
                    ->GetArray();

            // tests exterior ring equality
            test_iso_shape_equality(actual_geom, expected_geom, true);
          }
        }
      }
    }
  }
}

std::vector<PointLL> polygon_from_geojson(const std::string& geojson) {
  rapidjson::Document response;
  response.Parse(geojson);

  auto feature_count = rp("/features").Get(response)->GetArray().Size();
  for (size_t i = 0; i < feature_count; ++i) {
    std::string type =
        rp("/features/" + std::to_string(i) + "/geometry/type").Get(response)->GetString();

    if (type != "Point") {
      auto geom = rp("/features/" + std::to_string(i) + "/geometry/coordinates" +
                     (type == "Polygon" ? "/0" : ""))
                      .Get(response)
                      ->GetArray();
      std::vector<PointLL> res;
      res.reserve(geom.Size());
      for (size_t j = 0; j < geom.Size(); ++j) {
        auto coord = geom[j].GetArray();
        res.emplace_back(coord[0].GetDouble(), coord[1].GetDouble());
      }
      return res;
    }
  }
  return {};
}

TEST(Isochrones, Basic) {
  // Test setup
  loki_worker_t loki_worker(cfg);
  thor_worker_t thor_worker(cfg);
  GraphReader reader(cfg.get_child("mjolnir"));

  {
    const auto request =
        R"({"locations":[{"lat":52.078937,"lon":5.115321}],"costing":"auto","contours":[{"time":9.1}],"polygons":false,"generalize":55})";
    const auto expected =
        R"({"features":[{"properties":{"fill-opacity":0.33,"fillColor":"#bf4040","opacity":0.33,"fill":"#bf4040","fillOpacity":0.33,"color":"#bf4040","contour":9.1,"metric":"time"},"geometry":{"coordinates":[[5.042321,52.127328],[5.041288,52.126971],[5.041162,52.126096],[5.040250,52.126008],[5.040123,52.125135],[5.038321,52.124230],[5.038155,52.123104],[5.035757,52.121937],[5.034321,52.119336],[5.029719,52.120335],[5.027321,52.122071],[5.025528,52.122144],[5.025321,52.123106],[5.023541,52.123157],[5.022162,52.124937],[5.022291,52.123907],[5.023244,52.122860],[5.024983,52.122599],[5.025321,52.121673],[5.026949,52.121565],[5.028321,52.119350],[5.029770,52.119386],[5.030321,52.118047],[5.031738,52.118354],[5.031768,52.117491],[5.030068,52.117190],[5.029028,52.112644],[5.032109,52.116149],[5.037321,52.115662],[5.044771,52.112387],[5.047321,52.112089],[5.047520,52.111136],[5.049379,52.110995],[5.047712,52.109937],[5.053321,52.103702],[5.057006,52.103622],[5.058321,52.102515],[5.061389,52.102937],[5.060882,52.100376],[5.059321,52.099179],[5.056855,52.098937],[5.057948,52.098564],[5.057822,52.096937],[5.059321,52.096398],[5.059890,52.094937],[5.062669,52.096285],[5.063657,52.092601],[5.059321,52.093638],[5.057934,52.090324],[5.054848,52.088410],[5.051513,52.088129],[5.051321,52.089053],[5.051073,52.088185],[5.048321,52.087370],[5.047321,52.088623],[5.046687,52.086571],[5.044576,52.084937],[5.045321,52.084802],[5.047321,52.085491],[5.048713,52.085329],[5.049321,52.082083],[5.050409,52.083850],[5.053317,52.081933],[5.055321,52.082660],[5.071321,52.081546],[5.072536,52.078937],[5.070321,52.075645],[5.068321,52.076598],[5.064321,52.076524],[5.063321,52.077492],[5.060985,52.077273],[5.060321,52.074253],[5.062321,52.076406],[5.063321,52.075371],[5.066556,52.075173],[5.067628,52.072937],[5.067514,52.070744],[5.065321,52.069631],[5.061321,52.069611],[5.060321,52.070600],[5.054934,52.070937],[5.056828,52.072937],[5.057903,52.077355],[5.060418,52.078937],[5.059321,52.081790],[5.057766,52.078492],[5.054557,52.077937],[5.055847,52.077463],[5.055644,52.074614],[5.053321,52.074166],[5.053916,52.077937],[5.053321,52.078215],[5.052921,52.076337],[5.051321,52.076004],[5.049321,52.079349],[5.049113,52.078145],[5.047811,52.078427],[5.047736,52.079522],[5.048998,52.079937],[5.048420,52.082036],[5.046798,52.078460],[5.044152,52.077106],[5.044305,52.074921],[5.043205,52.075937],[5.043272,52.074888],[5.043588,52.074204],[5.043516,52.072937],[5.042321,52.072093],[5.040321,52.073230],[5.034963,52.073579],[5.034321,52.078500],[5.028415,52.075937],[5.022321,52.075363],[5.021967,52.073583],[5.026171,52.072937],[5.027090,52.069706],[5.030321,52.071554],[5.037321,52.071095],[5.043321,52.069471],[5.047584,52.069200],[5.049321,52.068151],[5.054321,52.068229],[5.056321,52.066108],[5.059321,52.067213],[5.063501,52.066117],[5.063749,52.064365],[5.066245,52.061937],[5.066622,52.058937],[5.065629,52.057937],[5.067742,52.057358],[5.067482,52.054937],[5.068412,52.054846],[5.069986,52.058272],[5.073724,52.057937],[5.070994,52.057264],[5.069724,52.051534],[5.066166,52.051937],[5.066182,52.050798],[5.067807,52.050423],[5.070321,52.046926],[5.070489,52.047769],[5.072941,52.046557],[5.074321,52.047386],[5.075321,52.046360],[5.077321,52.046293],[5.078321,52.047273],[5.079321,52.046325],[5.080321,52.047249],[5.082321,52.046259],[5.084321,52.046217],[5.085321,52.047210],[5.089321,52.046295],[5.090321,52.047254],[5.091321,52.046299],[5.093321,52.046308],[5.094023,52.048236],[5.098321,52.046241],[5.099150,52.049108],[5.101179,52.051079],[5.102321,52.050145],[5.104104,52.050154],[5.106321,52.050234],[5.107564,52.051180],[5.107902,52.048518],[5.111321,52.048247],[5.112321,52.046211],[5.113156,52.049103],[5.114082,52.049176],[5.114885,52.046501],[5.118321,52.046159],[5.120321,52.049158],[5.123321,52.049170],[5.124321,52.048185],[5.125321,52.049180],[5.137321,52.049242],[5.138321,52.050250],[5.141321,52.050274],[5.142321,52.048247],[5.145321,52.052234],[5.146321,52.051283],[5.147321,52.052271],[5.153321,52.052233],[5.155531,52.051147],[5.155730,52.048937],[5.156715,52.048543],[5.156054,52.053937],[5.159038,52.054937],[5.158321,52.055654],[5.155321,52.055673],[5.154089,52.057169],[5.157321,52.057302],[5.159942,52.058937],[5.157321,52.059570],[5.155921,52.058337],[5.152166,52.058782],[5.151716,52.063332],[5.151269,52.063989],[5.149185,52.063801],[5.149130,52.065937],[5.151202,52.068057],[5.152321,52.068114],[5.157733,52.064349],[5.159115,52.064937],[5.158940,52.066556],[5.157196,52.066812],[5.153964,52.069580],[5.152204,52.069820],[5.151829,52.070937],[5.161805,52.079453],[5.163076,52.087937],[5.161705,52.090937],[5.163080,52.091937],[5.160754,52.092937],[5.160613,52.094229],[5.156863,52.097479],[5.157778,52.099394],[5.154859,52.100475],[5.153664,52.102937],[5.154321,52.103593],[5.156321,52.103359],[5.156893,52.104365],[5.161843,52.104937],[5.157321,52.105503],[5.156749,52.104509],[5.154046,52.104662],[5.152666,52.108282],[5.148745,52.113361],[5.148560,52.117176],[5.146688,52.117304],[5.147321,52.119762],[5.149593,52.117937],[5.149479,52.119095],[5.146387,52.121003],[5.146353,52.122905],[5.147322,52.122936],[5.147321,52.124034],[5.147316,52.122942],[5.146303,52.122937],[5.145994,52.120264],[5.142638,52.119937],[5.146082,52.119698],[5.146024,52.116937],[5.147915,52.113343],[5.145043,52.113215],[5.142321,52.111476],[5.142256,52.110872],[5.144917,52.109937],[5.142059,52.108199],[5.141321,52.106359],[5.140321,52.109126],[5.134001,52.107257],[5.131323,52.107935],[5.129321,52.104613],[5.127464,52.105937],[5.127001,52.105257],[5.124321,52.105052],[5.121321,52.105478],[5.120705,52.106321],[5.114321,52.106650],[5.112106,52.105937],[5.111321,52.104541],[5.110128,52.107937],[5.109321,52.108434],[5.108009,52.107625],[5.107321,52.109550],[5.105050,52.109208],[5.103321,52.106732],[5.101321,52.106806],[5.099613,52.107937],[5.099321,52.109550],[5.094522,52.108736],[5.094321,52.107870],[5.092536,52.110152],[5.090344,52.110960],[5.079114,52.113144],[5.078884,52.111937],[5.080159,52.110937],[5.079285,52.109937],[5.081850,52.108466],[5.083025,52.106641],[5.087321,52.107423],[5.089635,52.105623],[5.085321,52.103302],[5.084321,52.104616],[5.082879,52.104495],[5.082601,52.106217],[5.079350,52.105966],[5.078321,52.107218],[5.077321,52.107047],[5.077321,52.104012],[5.078321,52.104623],[5.078929,52.103937],[5.078321,52.103167],[5.077321,52.103618],[5.077321,52.102764],[5.078312,52.101928],[5.080321,52.102151],[5.081321,52.100617],[5.082321,52.101396],[5.082798,52.099937],[5.079321,52.099443],[5.078321,52.100514],[5.077321,52.098449],[5.076321,52.099214],[5.071321,52.098889],[5.071321,52.095681],[5.070165,52.098781],[5.061847,52.106463],[5.060235,52.106851],[5.055330,52.110937],[5.059321,52.112547],[5.062321,52.109518],[5.063768,52.109490],[5.063820,52.111937],[5.061808,52.112424],[5.057767,52.116937],[5.058695,52.118311],[5.056869,52.118485],[5.056387,52.119871],[5.058321,52.119783],[5.058970,52.118586],[5.061220,52.117836],[5.064005,52.117937],[5.062427,52.118043],[5.062321,52.119101],[5.060321,52.120161],[5.056282,52.119976],[5.054321,52.118230],[5.050361,52.118977],[5.050023,52.117236],[5.047501,52.117117],[5.047321,52.117767],[5.047321,52.116171],[5.049321,52.114042],[5.049475,52.114783],[5.052321,52.114542],[5.053321,52.115561],[5.055665,52.115281],[5.055612,52.113646],[5.053321,52.111551],[5.049195,52.112811],[5.049213,52.113829],[5.046321,52.113771],[5.043321,52.115487],[5.041321,52.115474],[5.035871,52.118487],[5.038321,52.121583],[5.038623,52.119937],[5.039353,52.119905],[5.040321,52.120732],[5.041756,52.119937],[5.042051,52.120937],[5.038526,52.122142],[5.038415,52.122937],[5.038489,52.123769],[5.039657,52.123937],[5.041389,52.125870],[5.041477,52.126781],[5.042321,52.126913],[5.042321,52.127328]],"type":"LineString"},"type":"Feature"}],"type":"FeatureCollection"})";
    try_isochrone(loki_worker, thor_worker, request, expected);
  }

  {
    const auto request =
        R"({"locations":[{"lat":52.078937,"lon":5.115321}],"costing":"bicycle","costing_options":{"bicycle":{"service_penalty":0}},"contours":[{"time":15}],"polygons":true,"denoise":0.2})";
    const auto expected =
        R"({"features":[{"properties":{"fill-opacity":0.33,"fillColor":"#bf4040","opacity":0.33,"fill":"#bf4040","fillOpacity":0.33,"color":"#bf4040","contour":15,"metric":"time"},"geometry":{"coordinates":[[[5.108321,52.106133],[5.105321,52.106242],[5.103227,52.105031],[5.101321,52.105126],[5.100321,52.104612],[5.098321,52.104950],[5.094681,52.103937],[5.094321,52.101694],[5.095785,52.101401],[5.098321,52.098534],[5.100321,52.098287],[5.101321,52.097284],[5.103321,52.097293],[5.103321,52.095801],[5.103029,52.096645],[5.102321,52.096791],[5.095321,52.096753],[5.094321,52.097731],[5.088081,52.097697],[5.087983,52.098275],[5.089502,52.098756],[5.089643,52.099615],[5.090729,52.099937],[5.089321,52.100487],[5.088321,52.100213],[5.087321,52.101688],[5.085751,52.100937],[5.085321,52.099826],[5.082580,52.098937],[5.085321,52.098574],[5.085732,52.097937],[5.085321,52.097544],[5.081321,52.097320],[5.080051,52.097937],[5.080203,52.096819],[5.081875,52.095937],[5.079321,52.095542],[5.078765,52.094937],[5.079911,52.093527],[5.081638,52.092937],[5.078917,52.092342],[5.078764,52.090937],[5.079917,52.088533],[5.081712,52.087937],[5.081321,52.087147],[5.080254,52.087004],[5.079886,52.083937],[5.081540,52.082156],[5.081661,52.079937],[5.080818,52.079440],[5.078731,52.079347],[5.077896,52.079512],[5.077321,52.080426],[5.076321,52.080581],[5.076165,52.079937],[5.077321,52.078611],[5.082321,52.078291],[5.082568,52.077184],[5.084321,52.075779],[5.084576,52.074682],[5.082885,52.073937],[5.084614,52.071644],[5.082187,52.071803],[5.081899,52.072515],[5.079135,52.074751],[5.078965,52.075293],[5.079752,52.075937],[5.078542,52.077158],[5.077321,52.077268],[5.075321,52.075447],[5.070758,52.074937],[5.071321,52.074578],[5.074321,52.074450],[5.074954,52.073570],[5.076549,52.073165],[5.076575,52.071683],[5.075321,52.071450],[5.074808,52.070937],[5.074994,52.069610],[5.075984,52.068937],[5.075914,52.065530],[5.081321,52.065241],[5.084070,52.062686],[5.086663,52.062279],[5.087321,52.061429],[5.089321,52.061093],[5.089444,52.062060],[5.088578,52.063194],[5.088887,52.064371],[5.090321,52.064512],[5.091321,52.063497],[5.092724,52.063340],[5.093321,52.062497],[5.094321,52.064097],[5.094649,52.063265],[5.095460,52.063076],[5.095733,52.062349],[5.100727,52.058343],[5.101298,52.056914],[5.102338,52.056920],[5.102894,52.057364],[5.104321,52.056186],[5.106380,52.055996],[5.105321,52.054503],[5.104321,52.054945],[5.103599,52.054659],[5.103433,52.053825],[5.102665,52.053593],[5.102435,52.052823],[5.100981,52.052277],[5.100321,52.051343],[5.096519,52.051135],[5.096321,52.051628],[5.096115,52.051143],[5.097017,52.050633],[5.102321,52.050477],[5.104321,52.048435],[5.104894,52.050364],[5.106321,52.050394],[5.107706,52.051322],[5.108321,52.050495],[5.111913,52.049529],[5.112321,52.049087],[5.114310,52.050937],[5.113321,52.051958],[5.112934,52.051324],[5.111029,52.051645],[5.112002,52.052937],[5.112126,52.055132],[5.114321,52.055681],[5.115482,52.056776],[5.121321,52.057218],[5.123321,52.059146],[5.125321,52.059215],[5.126321,52.058232],[5.127519,52.059135],[5.128186,52.056802],[5.131812,52.056428],[5.132321,52.056061],[5.136323,52.056935],[5.137321,52.057547],[5.139321,52.057085],[5.139895,52.058363],[5.141624,52.059634],[5.141735,52.060937],[5.142808,52.061450],[5.144321,52.063187],[5.150021,52.057637],[5.151782,52.057398],[5.152321,52.056021],[5.152321,52.058197],[5.150823,52.058439],[5.147866,52.062482],[5.146158,52.063774],[5.145868,52.065484],[5.144321,52.065722],[5.144200,52.066058],[5.145905,52.066353],[5.146321,52.067168],[5.147530,52.067146],[5.148321,52.063899],[5.148740,52.066518],[5.151091,52.068167],[5.152321,52.068296],[5.153321,52.067337],[5.154655,52.067271],[5.156321,52.065622],[5.158078,52.065937],[5.156855,52.066471],[5.155643,52.068259],[5.154321,52.068486],[5.152914,52.069937],[5.153321,52.070437],[5.157335,52.070937],[5.152321,52.071514],[5.151321,52.070638],[5.149107,52.072937],[5.151746,52.073512],[5.152321,52.075389],[5.153321,52.073865],[5.153943,52.075315],[5.155525,52.075734],[5.155380,52.077996],[5.153321,52.076444],[5.151876,52.077937],[5.153321,52.079469],[5.154548,52.079710],[5.155321,52.080761],[5.156130,52.080937],[5.156124,52.082134],[5.156835,52.082937],[5.156094,52.083164],[5.155658,52.082601],[5.154034,52.082224],[5.153670,52.081589],[5.152321,52.081506],[5.151583,52.080675],[5.149878,52.080380],[5.149526,52.079732],[5.148963,52.079937],[5.149164,52.081094],[5.151126,52.083132],[5.153768,52.083490],[5.153716,52.085937],[5.154647,52.087611],[5.155630,52.087937],[5.154321,52.089447],[5.151321,52.089430],[5.150858,52.089937],[5.151321,52.090504],[5.154088,52.090937],[5.153601,52.091217],[5.153321,52.093413],[5.152232,52.094026],[5.150321,52.093097],[5.149321,52.093808],[5.148321,52.093005],[5.147924,52.093540],[5.148321,52.094324],[5.149321,52.094187],[5.149858,52.095400],[5.151321,52.095321],[5.151894,52.097364],[5.154121,52.097937],[5.153491,52.098107],[5.153321,52.098841],[5.152974,52.098284],[5.152321,52.098260],[5.150908,52.098524],[5.150321,52.099513],[5.147207,52.099051],[5.146821,52.098937],[5.148732,52.098348],[5.148625,52.097634],[5.145321,52.097622],[5.144793,52.097937],[5.146181,52.098937],[5.145730,52.099937],[5.146519,52.100937],[5.146321,52.101629],[5.145019,52.101240],[5.144912,52.099937],[5.144321,52.099476],[5.142828,52.100937],[5.143321,52.101667],[5.144485,52.101937],[5.142656,52.102937],[5.140321,52.102566],[5.140038,52.102220],[5.137321,52.102151],[5.136321,52.103072],[5.135895,52.102363],[5.134155,52.102103],[5.133783,52.099937],[5.134321,52.099378],[5.135598,52.099214],[5.135580,52.096937],[5.134666,52.096592],[5.134321,52.095878],[5.132462,52.096078],[5.132120,52.096736],[5.130321,52.097066],[5.129321,52.098041],[5.128321,52.098234],[5.126988,52.099604],[5.124891,52.099367],[5.124313,52.098929],[5.124334,52.102937],[5.120321,52.103242],[5.119321,52.102682],[5.116321,52.105625],[5.115321,52.104350],[5.114321,52.104814],[5.112321,52.104898],[5.111321,52.104483],[5.110652,52.105268],[5.108321,52.106133]]],"type":"Polygon"},"type":"Feature"}],"type":"FeatureCollection"})";
    try_isochrone(loki_worker, thor_worker, request, expected);
  }

  {
    const auto request =
        R"({"locations":[{"lat":52.078937,"lon":5.115321}],"costing":"bicycle","costing_options":{"bicycle":{"service_penalty":0}},"contours":[{"time":15}],"show_locations":true})";
    const auto expected =
        R"({"features":[{"properties":{"fill-opacity":0.33,"fillColor":"#bf4040","opacity":0.33,"fill":"#bf4040","fillOpacity":0.33,"color":"#bf4040","contour":15,"metric":"time"},"geometry":{"coordinates":[[5.108321,52.106133],[5.105321,52.106242],[5.103227,52.105031],[5.101321,52.105126],[5.100321,52.104612],[5.098321,52.104950],[5.094681,52.103937],[5.094321,52.101694],[5.095785,52.101401],[5.098321,52.098534],[5.100321,52.098287],[5.101321,52.097284],[5.103321,52.097293],[5.103321,52.095801],[5.103029,52.096645],[5.102321,52.096791],[5.095321,52.096753],[5.094321,52.097731],[5.088081,52.097697],[5.087983,52.098275],[5.089502,52.098756],[5.089643,52.099615],[5.090729,52.099937],[5.089321,52.100487],[5.088321,52.100213],[5.087321,52.101688],[5.085751,52.100937],[5.085321,52.099826],[5.082580,52.098937],[5.085321,52.098574],[5.085732,52.097937],[5.085321,52.097544],[5.081321,52.097320],[5.080051,52.097937],[5.080203,52.096819],[5.081875,52.095937],[5.079321,52.095542],[5.078765,52.094937],[5.079911,52.093527],[5.081638,52.092937],[5.078917,52.092342],[5.078764,52.090937],[5.079917,52.088533],[5.081712,52.087937],[5.081321,52.087147],[5.080254,52.087004],[5.079886,52.083937],[5.081540,52.082156],[5.081661,52.079937],[5.080818,52.079440],[5.078731,52.079347],[5.077896,52.079512],[5.077321,52.080426],[5.076321,52.080581],[5.076165,52.079937],[5.077321,52.078611],[5.082321,52.078291],[5.082568,52.077184],[5.084321,52.075779],[5.084576,52.074682],[5.082885,52.073937],[5.084614,52.071644],[5.082187,52.071803],[5.081899,52.072515],[5.079135,52.074751],[5.078965,52.075293],[5.079752,52.075937],[5.078542,52.077158],[5.077321,52.077268],[5.075321,52.075447],[5.070758,52.074937],[5.071321,52.074578],[5.074321,52.074450],[5.074954,52.073570],[5.076549,52.073165],[5.076575,52.071683],[5.075321,52.071450],[5.074808,52.070937],[5.074994,52.069610],[5.075984,52.068937],[5.075914,52.065530],[5.081321,52.065241],[5.084070,52.062686],[5.086663,52.062279],[5.087321,52.061429],[5.089321,52.061093],[5.089444,52.062060],[5.088578,52.063194],[5.088887,52.064371],[5.090321,52.064512],[5.091321,52.063497],[5.092724,52.063340],[5.093321,52.062497],[5.094321,52.064097],[5.094649,52.063265],[5.095460,52.063076],[5.095733,52.062349],[5.100727,52.058343],[5.101298,52.056914],[5.102338,52.056920],[5.102894,52.057364],[5.104321,52.056186],[5.106380,52.055996],[5.105321,52.054503],[5.104321,52.054945],[5.103599,52.054659],[5.103433,52.053825],[5.102665,52.053593],[5.102435,52.052823],[5.100981,52.052277],[5.100321,52.051343],[5.096519,52.051135],[5.096321,52.051628],[5.096115,52.051143],[5.097017,52.050633],[5.102321,52.050477],[5.104321,52.048435],[5.104894,52.050364],[5.106321,52.050394],[5.107706,52.051322],[5.108321,52.050495],[5.111913,52.049529],[5.112321,52.049087],[5.114310,52.050937],[5.113321,52.051958],[5.112934,52.051324],[5.111029,52.051645],[5.112002,52.052937],[5.112126,52.055132],[5.114321,52.055681],[5.115482,52.056776],[5.121321,52.057218],[5.123321,52.059146],[5.125321,52.059215],[5.126321,52.058232],[5.127519,52.059135],[5.128186,52.056802],[5.131812,52.056428],[5.132321,52.056061],[5.136323,52.056935],[5.137321,52.057547],[5.139321,52.057085],[5.139895,52.058363],[5.141624,52.059634],[5.141735,52.060937],[5.142808,52.061450],[5.144321,52.063187],[5.150021,52.057637],[5.151782,52.057398],[5.152321,52.056021],[5.152321,52.058197],[5.150823,52.058439],[5.147866,52.062482],[5.146158,52.063774],[5.145868,52.065484],[5.144321,52.065722],[5.144200,52.066058],[5.145905,52.066353],[5.146321,52.067168],[5.147530,52.067146],[5.148321,52.063899],[5.148740,52.066518],[5.151091,52.068167],[5.152321,52.068296],[5.153321,52.067337],[5.154655,52.067271],[5.156321,52.065622],[5.158078,52.065937],[5.156855,52.066471],[5.155643,52.068259],[5.154321,52.068486],[5.152914,52.069937],[5.153321,52.070437],[5.157335,52.070937],[5.152321,52.071514],[5.151321,52.070638],[5.149107,52.072937],[5.151746,52.073512],[5.152321,52.075389],[5.153321,52.073865],[5.153943,52.075315],[5.155525,52.075734],[5.155380,52.077996],[5.153321,52.076444],[5.151876,52.077937],[5.153321,52.079469],[5.154548,52.079710],[5.155321,52.080761],[5.156130,52.080937],[5.156124,52.082134],[5.156835,52.082937],[5.156094,52.083164],[5.155658,52.082601],[5.154034,52.082224],[5.153670,52.081589],[5.152321,52.081506],[5.151583,52.080675],[5.149878,52.080380],[5.149526,52.079732],[5.148963,52.079937],[5.149164,52.081094],[5.151126,52.083132],[5.153768,52.083490],[5.153716,52.085937],[5.154647,52.087611],[5.155630,52.087937],[5.154321,52.089447],[5.151321,52.089430],[5.150858,52.089937],[5.151321,52.090504],[5.154088,52.090937],[5.153601,52.091217],[5.153321,52.093413],[5.152232,52.094026],[5.150321,52.093097],[5.149321,52.093808],[5.148321,52.093005],[5.147924,52.093540],[5.148321,52.094324],[5.149321,52.094187],[5.149858,52.095400],[5.151321,52.095321],[5.151894,52.097364],[5.154121,52.097937],[5.153491,52.098107],[5.153321,52.098841],[5.152974,52.098284],[5.152321,52.098260],[5.150908,52.098524],[5.150321,52.099513],[5.147207,52.099051],[5.146821,52.098937],[5.148732,52.098348],[5.148625,52.097634],[5.145321,52.097622],[5.144793,52.097937],[5.146181,52.098937],[5.145730,52.099937],[5.146519,52.100937],[5.146321,52.101629],[5.145019,52.101240],[5.144912,52.099937],[5.144321,52.099476],[5.142828,52.100937],[5.143321,52.101667],[5.144485,52.101937],[5.142656,52.102937],[5.140321,52.102566],[5.140038,52.102220],[5.137321,52.102151],[5.136321,52.103072],[5.135895,52.102363],[5.134155,52.102103],[5.133783,52.099937],[5.134321,52.099378],[5.135598,52.099214],[5.135580,52.096937],[5.134666,52.096592],[5.134321,52.095878],[5.132462,52.096078],[5.132120,52.096736],[5.130321,52.097066],[5.129321,52.098041],[5.128321,52.098234],[5.126988,52.099604],[5.124891,52.099367],[5.124313,52.098929],[5.124334,52.102937],[5.120321,52.103242],[5.119321,52.102682],[5.116321,52.105625],[5.115321,52.104350],[5.114321,52.104814],[5.112321,52.104898],[5.111321,52.104483],[5.110652,52.105268],[5.108321,52.106133]],"type":"LineString"},"type":"Feature"},{"geometry":{"coordinates":[[5.115328,52.078940]],"type":"MultiPoint"},"properties":{"location_index":0,"type":"snapped"},"type":"Feature"},{"geometry":{"coordinates":[5.115321,52.078937],"type":"Point"},"properties":{"location_index":0,"type":"input"},"type":"Feature"}],"type":"FeatureCollection"})";
    try_isochrone(loki_worker, thor_worker, request, expected);
  }

  // multi-location
  {
    const auto request =
        R"({"costing":"auto","locations":[{"lon":5.086633,"lat":52.075911},{"lon":5.128852,"lat":52.109455}],"contours":[{"time":5}],"denoise":0,"generalize":100,"polygons":true})";
    const auto expected =
        R"({"features":[{"properties":{"fill-opacity":0.33,"fillColor":"#bf4040","opacity":0.33,"fill":"#bf4040","fillOpacity":0.33,"color":"#bf4040","contour":5,"metric":"time"},"geometry":{"coordinates":[[[[5.056852,52.108489],[5.055434,52.108455],[5.056701,52.108304],[5.056852,52.107369],[5.058547,52.107150],[5.059738,52.105341],[5.061351,52.104954],[5.069194,52.096797],[5.070221,52.094086],[5.068578,52.093455],[5.070852,52.093217],[5.070016,52.091455],[5.072144,52.090455],[5.070290,52.087017],[5.063520,52.085455],[5.067852,52.084288],[5.072852,52.085983],[5.074336,52.082455],[5.071144,52.075164],[5.066832,52.075475],[5.068410,52.071455],[5.066852,52.069825],[5.045418,52.070455],[5.064266,52.066869],[5.064647,52.064250],[5.067490,52.062455],[5.066852,52.057242],[5.068427,52.061880],[5.075295,52.062455],[5.069257,52.063455],[5.073852,52.073082],[5.075559,52.066162],[5.079852,52.063938],[5.085961,52.063346],[5.088852,52.070664],[5.096407,52.063455],[5.095852,52.061675],[5.090393,52.061455],[5.102663,52.059266],[5.106558,52.056455],[5.106695,52.053612],[5.104829,52.053478],[5.104852,52.052441],[5.104921,52.053386],[5.106852,52.053282],[5.108258,52.054455],[5.107370,52.057937],[5.109442,52.058045],[5.108852,52.056009],[5.109919,52.056388],[5.110065,52.058242],[5.111817,52.058455],[5.112852,52.065218],[5.118791,52.063394],[5.119852,52.064907],[5.124870,52.065455],[5.121809,52.066412],[5.120852,52.068970],[5.116326,52.067455],[5.118937,52.072540],[5.117277,52.075455],[5.119852,52.074565],[5.123852,52.076969],[5.122852,52.079743],[5.116425,52.080028],[5.112215,52.083455],[5.112892,52.084495],[5.109524,52.085127],[5.109199,52.088802],[5.106467,52.088455],[5.107852,52.093280],[5.110852,52.093142],[5.111748,52.091455],[5.112852,52.091396],[5.112823,52.091484],[5.111964,52.091567],[5.112042,52.093645],[5.110356,52.094455],[5.113588,52.096455],[5.112852,52.097341],[5.109852,52.095973],[5.105672,52.097635],[5.108062,52.095455],[5.105852,52.093986],[5.102852,52.095595],[5.094852,52.094017],[5.087366,52.094969],[5.087350,52.099957],[5.089827,52.100455],[5.087883,52.102486],[5.086416,52.098891],[5.077852,52.098173],[5.080523,52.093455],[5.080204,52.083455],[5.084132,52.082455],[5.081372,52.081935],[5.080852,52.079173],[5.077852,52.079157],[5.078314,52.086455],[5.072004,52.095455],[5.061932,52.105535],[5.060073,52.105676],[5.058893,52.107496],[5.056935,52.107538],[5.056852,52.108489]],[[5.082984,52.077587],[5.086852,52.071159],[5.082852,52.071114],[5.077510,52.075113],[5.080918,52.076521],[5.076653,52.076654],[5.074139,52.073742],[5.074852,52.077684],[5.082984,52.077587]],[[5.069218,52.067821],[5.069502,52.064805],[5.066100,52.063703],[5.065457,52.066850],[5.069218,52.067821]],[[5.109120,52.075723],[5.110477,52.071455],[5.108586,52.069721],[5.106496,52.074455],[5.109120,52.075723]],[[5.099287,52.089890],[5.097211,52.087096],[5.094802,52.087455],[5.094633,52.089674],[5.099287,52.089890]],[[5.105123,52.071726],[5.106164,52.070143],[5.102852,52.069144],[5.101522,52.070785],[5.105123,52.071726]],[[5.105191,52.080794],[5.107336,52.078455],[5.105852,52.077117],[5.103506,52.079455],[5.105191,52.080794]],[[5.107241,52.086844],[5.106736,52.084455],[5.102627,52.084230],[5.107241,52.086844]],[[5.111298,52.081901],[5.112931,52.078376],[5.109410,52.078897],[5.111298,52.081901]],[[5.107193,52.081796],[5.109340,52.078967],[5.106470,52.081073],[5.107193,52.081796]],[[5.103137,52.086740],[5.102301,52.085006],[5.100651,52.085254],[5.103137,52.086740]],[[5.099049,52.081652],[5.100080,52.080227],[5.097852,52.080189],[5.099049,52.081652]],[[5.101063,52.073666],[5.101182,52.071125],[5.099191,52.073455],[5.101063,52.073666]],[[5.112918,52.072521],[5.111852,52.071420],[5.111852,52.072571],[5.112918,52.072521]]],[[[5.154852,52.136523],[5.152744,52.134563],[5.152423,52.132884],[5.150645,52.131662],[5.150311,52.129996],[5.146788,52.128519],[5.146420,52.126887],[5.142852,52.125691],[5.140461,52.126455],[5.142467,52.125070],[5.141988,52.122319],[5.134122,52.118185],[5.124353,52.120455],[5.128003,52.125304],[5.128170,52.127137],[5.129495,52.127455],[5.128852,52.128509],[5.127852,52.127804],[5.127761,52.125546],[5.122852,52.121590],[5.109284,52.126455],[5.109852,52.125408],[5.114294,52.123897],[5.115258,52.122049],[5.109852,52.116848],[5.102792,52.117455],[5.102622,52.112455],[5.100653,52.112455],[5.099221,52.109455],[5.105852,52.112897],[5.110219,52.108822],[5.107852,52.107868],[5.103852,52.108933],[5.106631,52.099234],[5.112852,52.097519],[5.119852,52.097570],[5.119852,52.096005],[5.116663,52.095645],[5.117794,52.092455],[5.118904,52.092403],[5.119852,52.093324],[5.122765,52.092543],[5.123852,52.094149],[5.123200,52.092455],[5.125488,52.091455],[5.123463,52.089455],[5.123852,52.089204],[5.125238,52.089841],[5.126852,52.088230],[5.128852,52.088426],[5.131852,52.094904],[5.135024,52.094455],[5.134852,52.091751],[5.140852,52.090987],[5.143852,52.094932],[5.148852,52.086273],[5.149222,52.088455],[5.147237,52.090455],[5.149852,52.092227],[5.146852,52.091720],[5.146159,52.094148],[5.149852,52.097047],[5.154852,52.095499],[5.154918,52.096389],[5.154168,52.097455],[5.154852,52.098183],[5.159528,52.093455],[5.157852,52.091697],[5.152086,52.090455],[5.155661,52.090264],[5.157852,52.091018],[5.161977,52.089330],[5.160068,52.094671],[5.154371,52.102455],[5.161143,52.105746],[5.154517,52.105120],[5.150305,52.111455],[5.154216,52.110819],[5.155852,52.108154],[5.158027,52.108280],[5.158852,52.110046],[5.160966,52.109341],[5.161077,52.110455],[5.155852,52.110877],[5.149509,52.114112],[5.151273,52.116455],[5.147438,52.120455],[5.148454,52.125853],[5.151886,52.129421],[5.153189,52.134119],[5.154905,52.135402],[5.154852,52.136523]],[[5.117346,52.121949],[5.122103,52.119706],[5.120730,52.116577],[5.122536,52.114455],[5.117825,52.115428],[5.113852,52.113724],[5.111560,52.116747],[5.117346,52.121949]],[[5.152154,52.102757],[5.154279,52.099028],[5.145574,52.097177],[5.144312,52.098455],[5.146548,52.100759],[5.148852,52.100063],[5.152154,52.102757]],[[5.141290,52.112893],[5.144263,52.109455],[5.142852,52.108095],[5.141443,52.108864],[5.140852,52.107141],[5.140322,52.110925],[5.137582,52.112455],[5.141290,52.112893]],[[5.144126,52.118729],[5.144852,52.115071],[5.141460,52.118455],[5.144126,52.118729]],[[5.150235,52.107838],[5.150398,52.104001],[5.148353,52.106455],[5.150235,52.107838]],[[5.145335,52.124938],[5.146378,52.122455],[5.143852,52.121137],[5.145335,52.124938]],[[5.129053,52.101656],[5.128055,52.099252],[5.125565,52.099168],[5.126515,52.101792],[5.129053,52.101656]],[[5.143090,52.105693],[5.143094,52.103214],[5.140613,52.103216],[5.140581,52.104726],[5.143090,52.105693]],[[5.140107,52.117710],[5.137439,52.116868],[5.136852,52.114175],[5.135628,52.116679],[5.140107,52.117710]],[[5.108915,52.103518],[5.108852,52.101735],[5.106657,52.103455],[5.108915,52.103518]],[[5.148331,52.127934],[5.147370,52.126973],[5.147049,52.128258],[5.148331,52.127934]],[[5.138853,52.098456],[5.137852,52.097406],[5.137777,52.098455],[5.138853,52.098456]]]],"type":"MultiPolygon"},"type":"Feature"}],"type":"FeatureCollection"})";
    try_isochrone(loki_worker, thor_worker, request, expected);
  }

  // holes
  {
    const auto request =
        R"({"costing":"auto","locations":[{"lon": 5.068339,"lat": 52.089682}],"contours":[{"time":3}],"denoise":0,"generalize":0,"polygons":true})";
    const auto expected =
        R"({"features":[{"properties":{"fill-opacity":0.33,"fillColor":"#bf4040","opacity":0.33,"fill":"#bf4040","fillOpacity":0.33,"color":"#bf4040","contour":3,"metric":"time"},"geometry":{"coordinates":[[[[5.077339,52.097700],[5.077316,52.097705],[5.076432,52.097775],[5.076339,52.097806],[5.076219,52.097802],[5.075558,52.097901],[5.075339,52.097896],[5.075115,52.097906],[5.074629,52.097972],[5.074339,52.097983],[5.074072,52.097950],[5.073481,52.097824],[5.073339,52.097803],[5.073229,52.097792],[5.072359,52.097702],[5.072339,52.097700],[5.072321,52.097700],[5.072077,52.097682],[5.072310,52.097653],[5.072339,52.097577],[5.072625,52.096969],[5.072584,52.096682],[5.072480,52.096541],[5.072339,52.096499],[5.071987,52.096330],[5.071807,52.096214],[5.071339,52.096099],[5.070864,52.096207],[5.070454,52.096682],[5.070445,52.096788],[5.070339,52.096797],[5.070155,52.096866],[5.069462,52.096805],[5.069339,52.097110],[5.069183,52.096838],[5.069188,52.096682],[5.069243,52.096586],[5.069214,52.095807],[5.069246,52.095682],[5.069305,52.095648],[5.069339,52.095655],[5.069403,52.095618],[5.070168,52.095511],[5.070149,52.094872],[5.070235,52.094682],[5.070071,52.094414],[5.069976,52.094045],[5.069679,52.094022],[5.069339,52.093858],[5.069091,52.093930],[5.068572,52.093915],[5.068339,52.094093],[5.067940,52.094081],[5.067724,52.094067],[5.067339,52.094055],[5.067024,52.093998],[5.066966,52.093682],[5.066767,52.093254],[5.066339,52.093026],[5.065870,52.093213],[5.065591,52.093682],[5.065564,52.093907],[5.065339,52.093934],[5.064919,52.094102],[5.064726,52.094069],[5.064711,52.094310],[5.064496,52.094682],[5.064486,52.094829],[5.064358,52.095663],[5.064357,52.095682],[5.064351,52.095694],[5.064339,52.095700],[5.064309,52.095712],[5.063806,52.095682],[5.064298,52.095641],[5.064100,52.094921],[5.064182,52.094682],[5.064180,52.094523],[5.064161,52.093860],[5.064159,52.093682],[5.064165,52.093508],[5.064219,52.092802],[5.064224,52.092682],[5.064212,52.092555],[5.064339,52.092484],[5.064689,52.092032],[5.064707,52.091682],[5.064584,52.091437],[5.064339,52.091276],[5.063968,52.091312],[5.063549,52.091472],[5.063339,52.091507],[5.062849,52.091192],[5.062835,52.091186],[5.062831,52.091174],[5.062537,52.090682],[5.062542,52.090479],[5.062339,52.090097],[5.061986,52.090035],[5.061635,52.089978],[5.061339,52.089928],[5.061212,52.089809],[5.061102,52.089682],[5.060772,52.089249],[5.060339,52.088738],[5.060302,52.088719],[5.060257,52.088682],[5.059589,52.088432],[5.059339,52.088359],[5.059111,52.088454],[5.058853,52.088682],[5.058643,52.088986],[5.058339,52.089279],[5.057948,52.089073],[5.057632,52.088975],[5.057339,52.088859],[5.057226,52.088795],[5.057046,52.088682],[5.056954,52.088297],[5.056896,52.088125],[5.056816,52.087682],[5.056510,52.087511],[5.056339,52.087456],[5.056064,52.087407],[5.055717,52.087304],[5.055339,52.087254],[5.054990,52.087333],[5.054687,52.087682],[5.054659,52.088002],[5.054339,52.088480],[5.053963,52.088306],[5.053785,52.088236],[5.053339,52.087969],[5.053184,52.087837],[5.052754,52.087682],[5.052414,52.087607],[5.052339,52.087593],[5.052129,52.087472],[5.051695,52.087327],[5.051432,52.086775],[5.051369,52.086682],[5.051362,52.086659],[5.051339,52.086643],[5.051295,52.086638],[5.051054,52.086682],[5.050438,52.086781],[5.050339,52.086756],[5.050299,52.086722],[5.050236,52.086682],[5.049828,52.086193],[5.049339,52.085909],[5.049153,52.085868],[5.048488,52.085682],[5.049250,52.085593],[5.049339,52.085427],[5.049512,52.085509],[5.050063,52.085406],[5.050339,52.085455],[5.050557,52.085464],[5.051059,52.085402],[5.051339,52.085410],[5.051727,52.085294],[5.051943,52.085286],[5.052339,52.085025],[5.052572,52.084915],[5.052899,52.084682],[5.053038,52.084381],[5.053339,52.084079],[5.053514,52.084507],[5.053508,52.084682],[5.053923,52.085098],[5.054339,52.085219],[5.054791,52.085230],[5.054880,52.085223],[5.055339,52.085232],[5.055837,52.085180],[5.055842,52.085179],[5.056339,52.085123],[5.056645,52.084988],[5.056876,52.084682],[5.056793,52.084228],[5.056583,52.083926],[5.056470,52.083682],[5.056510,52.083511],[5.056487,52.082830],[5.056558,52.082682],[5.057218,52.082561],[5.057339,52.082551],[5.057460,52.082562],[5.057601,52.082682],[5.057886,52.083135],[5.058339,52.083484],[5.058624,52.083397],[5.059043,52.083386],[5.059339,52.083178],[5.059718,52.083061],[5.059965,52.083056],[5.060339,52.082983],[5.060546,52.082889],[5.061337,52.082685],[5.061339,52.082684],[5.061340,52.082683],[5.061344,52.082682],[5.062211,52.082554],[5.062339,52.082545],[5.062483,52.082538],[5.063137,52.082480],[5.063339,52.082472],[5.063565,52.082456],[5.064048,52.082391],[5.064339,52.082373],[5.064662,52.082359],[5.064990,52.082333],[5.065339,52.082319],[5.065716,52.082305],[5.065945,52.082288],[5.066339,52.082273],[5.066778,52.082243],[5.066886,52.082229],[5.067339,52.082201],[5.067786,52.082235],[5.067913,52.082256],[5.068339,52.082294],[5.068712,52.082309],[5.068990,52.082333],[5.069339,52.082349],[5.069651,52.082370],[5.070094,52.082437],[5.070339,52.082456],[5.070553,52.082468],[5.071197,52.082540],[5.071339,52.082548],[5.071519,52.082502],[5.072096,52.082682],[5.071462,52.082805],[5.071339,52.082816],[5.070862,52.083205],[5.070765,52.083682],[5.070787,52.084130],[5.070795,52.084226],[5.070815,52.084682],[5.071030,52.084991],[5.071339,52.085101],[5.071725,52.085068],[5.071953,52.085068],[5.072339,52.085039],[5.072705,52.085048],[5.072973,52.085048],[5.073339,52.085059],[5.073606,52.084949],[5.073786,52.084682],[5.073971,52.084314],[5.074339,52.084129],[5.074647,52.083990],[5.074811,52.083682],[5.074664,52.083357],[5.074339,52.083182],[5.073952,52.083069],[5.073486,52.082682],[5.073580,52.082441],[5.073761,52.082104],[5.073862,52.081682],[5.073712,52.081309],[5.073339,52.081087],[5.072841,52.081180],[5.072836,52.081179],[5.072339,52.081394],[5.072063,52.080958],[5.071997,52.080682],[5.071993,52.080336],[5.071986,52.080035],[5.071982,52.079682],[5.072101,52.079444],[5.072339,52.079325],[5.072761,52.079104],[5.072992,52.078682],[5.072804,52.078217],[5.072339,52.077952],[5.072159,52.077862],[5.072069,52.077682],[5.072081,52.077424],[5.072135,52.076886],[5.072145,52.076682],[5.072032,52.076375],[5.072127,52.075894],[5.071457,52.075800],[5.071339,52.075727],[5.071309,52.075712],[5.071295,52.075682],[5.071288,52.075631],[5.071339,52.074961],[5.071680,52.075341],[5.071920,52.075263],[5.072339,52.075353],[5.072814,52.075157],[5.073165,52.074682],[5.073229,52.074572],[5.073339,52.074587],[5.073354,52.074667],[5.073348,52.074682],[5.073348,52.074691],[5.073361,52.075660],[5.073361,52.075682],[5.073384,52.075727],[5.073390,52.076631],[5.074271,52.076614],[5.074339,52.076647],[5.074360,52.076661],[5.074368,52.076682],[5.074371,52.076714],[5.074381,52.077640],[5.074384,52.077682],[5.074434,52.077777],[5.074479,52.078543],[5.075214,52.078557],[5.075339,52.078619],[5.075427,52.078594],[5.076263,52.078606],[5.076339,52.078553],[5.076474,52.078547],[5.077233,52.078576],[5.077339,52.078570],[5.077444,52.078577],[5.078272,52.078615],[5.078339,52.078619],[5.078412,52.078609],[5.079297,52.078640],[5.079339,52.078632],[5.079405,52.078616],[5.080104,52.078682],[5.079513,52.078856],[5.079339,52.078890],[5.079240,52.078781],[5.078499,52.078842],[5.078339,52.078793],[5.078224,52.078797],[5.077508,52.078851],[5.077339,52.078857],[5.076996,52.079025],[5.076714,52.079057],[5.076604,52.079417],[5.076437,52.079682],[5.076435,52.079778],[5.076379,52.080642],[5.076378,52.080682],[5.076377,52.080720],[5.076339,52.081273],[5.076289,52.081632],[5.076288,52.081682],[5.076303,52.081718],[5.076233,52.082576],[5.076253,52.082682],[5.076254,52.082767],[5.076211,52.083554],[5.076213,52.083682],[5.076211,52.083810],[5.076176,52.084519],[5.076174,52.084682],[5.076182,52.084839],[5.076154,52.085497],[5.076162,52.085682],[5.076219,52.085802],[5.076339,52.085870],[5.076472,52.085815],[5.076556,52.085682],[5.076562,52.085459],[5.076531,52.084874],[5.076537,52.084682],[5.076554,52.084467],[5.076514,52.083857],[5.076532,52.083682],[5.076531,52.083490],[5.076475,52.082818],[5.076474,52.082682],[5.076924,52.082267],[5.077339,52.082300],[5.077825,52.082168],[5.078238,52.081682],[5.078272,52.081615],[5.078339,52.081581],[5.078495,52.081526],[5.079332,52.081675],[5.079339,52.081651],[5.079342,52.081679],[5.079342,52.081682],[5.079341,52.081684],[5.079339,52.081685],[5.079326,52.081695],[5.078576,52.081919],[5.078717,52.082304],[5.078618,52.082682],[5.078659,52.083002],[5.078726,52.083295],[5.078766,52.083682],[5.078783,52.084126],[5.078791,52.084230],[5.078807,52.084682],[5.078651,52.084994],[5.078339,52.085150],[5.077997,52.085340],[5.077851,52.085682],[5.077867,52.086154],[5.077867,52.086210],[5.077881,52.086682],[5.077701,52.087044],[5.077339,52.087224],[5.076888,52.087231],[5.076790,52.087231],[5.076339,52.087238],[5.075953,52.087296],[5.075633,52.087388],[5.075339,52.087444],[5.075198,52.087541],[5.075134,52.087682],[5.075135,52.087886],[5.075113,52.088456],[5.075113,52.088682],[5.075101,52.088920],[5.075086,52.089429],[5.075072,52.089682],[5.074793,52.090136],[5.074339,52.090394],[5.074144,52.090487],[5.074030,52.090682],[5.073989,52.091032],[5.073946,52.091289],[5.073905,52.091682],[5.073690,52.092033],[5.073339,52.092306],[5.073088,52.092431],[5.072941,52.092682],[5.072853,52.093168],[5.072847,52.093190],[5.072773,52.093682],[5.072657,52.094000],[5.072339,52.094166],[5.071986,52.094329],[5.071777,52.094682],[5.071946,52.095076],[5.072339,52.095287],[5.072737,52.095284],[5.072958,52.095301],[5.073339,52.095298],[5.073613,52.095408],[5.073795,52.095682],[5.073954,52.096067],[5.074339,52.096285],[5.074627,52.096394],[5.074823,52.096682],[5.074948,52.097073],[5.075339,52.097379],[5.075602,52.097419],[5.076184,52.097527],[5.076339,52.097552],[5.076434,52.097587],[5.077315,52.097658],[5.077339,52.097664],[5.077353,52.097668],[5.077519,52.097682],[5.077352,52.097695],[5.077339,52.097700]],[[5.067532,52.088875],[5.067609,52.088682],[5.067852,52.088195],[5.068339,52.087952],[5.068520,52.087863],[5.068619,52.087682],[5.068556,52.087465],[5.068339,52.087320],[5.067956,52.087299],[5.067722,52.087299],[5.067339,52.087277],[5.066901,52.087244],[5.066777,52.087244],[5.066339,52.087206],[5.065861,52.087160],[5.065805,52.087149],[5.065339,52.087094],[5.064970,52.087313],[5.064782,52.087682],[5.064979,52.088043],[5.065339,52.088199],[5.065661,52.088360],[5.065822,52.088682],[5.066022,52.088999],[5.066339,52.089129],[5.066748,52.089091],[5.066931,52.089091],[5.067339,52.089058],[5.067532,52.088875]],[[5.065626,52.084969],[5.065859,52.084682],[5.065714,52.084307],[5.065339,52.084054],[5.064985,52.084036],[5.064658,52.084001],[5.064339,52.083982],[5.063944,52.084287],[5.063826,52.084682],[5.064037,52.084984],[5.064339,52.085098],[5.064749,52.085092],[5.064929,52.085092],[5.065339,52.085086],[5.065626,52.084969]],[[5.073577,52.087920],[5.073718,52.087682],[5.073584,52.087437],[5.073339,52.087325],[5.072989,52.087332],[5.072689,52.087332],[5.072339,52.087339],[5.072123,52.087466],[5.072027,52.087682],[5.072140,52.087881],[5.072339,52.087982],[5.072653,52.087996],[5.073025,52.087996],[5.073339,52.088012],[5.073577,52.087920]],[[5.062602,52.088945],[5.062625,52.088682],[5.062502,52.088519],[5.062339,52.088413],[5.062116,52.088459],[5.061904,52.088682],[5.061951,52.089070],[5.062339,52.089334],[5.062602,52.088945]]],[[[5.066339,52.094698],[5.066328,52.094693],[5.066323,52.094682],[5.066320,52.094663],[5.066339,52.094666],[5.066362,52.094660],[5.066355,52.094682],[5.066350,52.094693],[5.066339,52.094698]]]],"type":"MultiPolygon"},"type":"Feature"}],"type":"FeatureCollection"})";
    try_isochrone(loki_worker, thor_worker, request, expected);
  }
}

TEST(Isochrones, OriginEdge) {
  const std::string ascii_map = R"(
       a-b-c
     )";

  const gurka::ways ways = {
      {"abc", {{"highway", "primary"}}},
  };

  const auto layout = gurka::detail::map_to_coordinates(ascii_map, 2000);
  auto map = gurka::buildtiles(layout, ways, {}, {}, "test/data/isochrones/origin_edge");

  std::string geojson;
  auto result = gurka::do_action(valhalla::Options::isochrone, map, {"b"}, "pedestrian",
                                 {{"/contours/0/time", "10"}}, {}, &geojson);
  std::vector<PointLL> iso_polygon = polygon_from_geojson(geojson);

  auto WaypointToBoostPoint = [&](std::string waypoint) {
    auto point = map.nodes[waypoint];
    return point_type(point.x(), point.y());
  };
  polygon_type polygon;
  for (const auto& p : iso_polygon) {
    boost::geometry::append(polygon.outer(), point_type(p.x(), p.y()));
  }
  EXPECT_EQ(within(WaypointToBoostPoint("b"), polygon), true);
  EXPECT_EQ(within(WaypointToBoostPoint("a"), polygon), false);
  EXPECT_EQ(within(WaypointToBoostPoint("c"), polygon), false);
}

TEST(Isochrones, LongEdge) {
  const std::string ascii_map = R"(
          c----d
         /
      a-b--------------f
    )";

  const gurka::ways ways = {
      {"ab", {{"highway", "primary"}}},
      {"bc", {{"highway", "primary"}}},
      {"cd", {{"highway", "primary"}}},
      {"bf", {{"highway", "primary"}}},
  };

  const auto layout = gurka::detail::map_to_coordinates(ascii_map, 100);
  auto map = gurka::buildtiles(layout, ways, {}, {}, "test/data/isochrones/long_edge");

  std::string geojson;
  auto result = gurka::do_action(valhalla::Options::isochrone, map, {"a"}, "pedestrian",
                                 {{"/contours/0/time", "15"}}, {}, &geojson);
  std::vector<PointLL> iso_polygon = polygon_from_geojson(geojson);

  auto WaypointToBoostPoint = [&](std::string waypoint) {
    auto point = map.nodes[waypoint];
    return point_type(point.x(), point.y());
  };
  polygon_type polygon;
  for (const auto& p : iso_polygon) {
    boost::geometry::append(polygon.outer(), point_type(p.x(), p.y()));
  }
  EXPECT_EQ(within(WaypointToBoostPoint("a"), polygon), true);
  EXPECT_EQ(within(WaypointToBoostPoint("b"), polygon), true);
  EXPECT_EQ(within(WaypointToBoostPoint("c"), polygon), true);
  EXPECT_EQ(within(WaypointToBoostPoint("d"), polygon), true);
  EXPECT_EQ(within(WaypointToBoostPoint("f"), polygon), false);

  // check that b-f edges is visited and is partially within the isochrone
  auto interpolated = map.nodes["b"].PointAlongSegment(map.nodes["f"], 0.4);
  EXPECT_EQ(within(point_type(interpolated.x(), interpolated.y()), polygon), true);
}

class IsochroneTest : public thor::Isochrone {
public:
  explicit IsochroneTest(const boost::property_tree::ptree& config = {}) : Isochrone(config) {
  }

  void Clear() {
    Isochrone::Clear();
    if (clear_reserved_memory_) {
      EXPECT_EQ(bdedgelabels_.capacity(), 0);
      EXPECT_EQ(mmedgelabels_.capacity(), 0);
    } else {
      EXPECT_LE(bdedgelabels_.capacity(), max_reserved_labels_count_);
      EXPECT_LE(mmedgelabels_.capacity(), max_reserved_labels_count_);
    }
  }
};

TEST(Isochrones, test_clear_reserved_memory) {
  boost::property_tree::ptree config;
  config.put("clear_reserved_memory", true);

  IsochroneTest isochrone(config);
  isochrone.Clear();
}

TEST(Isochrones, test_max_reserved_labels_count) {
  boost::property_tree::ptree config;
  config.put("max_reserved_labels_count_dijkstras", 10);

  IsochroneTest isochrone(config);
  isochrone.Clear();
}

} // namespace

int main(int argc, char* argv[]) {
  // user wants to try it
  if (argc > 1) {
    loki_worker_t loki_worker(cfg);
    thor_worker_t thor_worker(cfg);
    GraphReader reader(cfg.get_child("mjolnir"));
    Api request;
    ParseApi(argv[1], Options::isochrone, request);
    loki_worker.isochrones(request);
    std::cout << thor_worker.isochrones(request) << std::endl;
    return EXIT_SUCCESS;
  }
  // Silence logs (especially long request logging)
  logging::Configure({{"type", ""}});
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
